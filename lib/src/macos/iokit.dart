// AUTO GENERATED FILE, DO NOT EDIT.
//
// Generated by `package:ffigen`.
import 'dart:ffi' as ffi;

/// Bindings to `IOKit.h`.
class IOKit {
  /// Holds the Dynamic library.
  final ffi.DynamicLibrary _dylib;

  /// The symbols are looked up in [dynamicLibrary].
  IOKit(ffi.DynamicLibrary dynamicLibrary) : _dylib = dynamicLibrary;

  ffi.Pointer<IOHIDDevice> IOHIDDeviceCreate(
    ffi.Pointer<CFAllocator> allocator,
    ffi.Pointer<io_service_t> service,
  ) {
    return (_IOHIDDeviceCreate ??=
        _dylib.lookupFunction<_c_IOHIDDeviceCreate, _dart_IOHIDDeviceCreate>(
            'IOHIDDeviceCreate'))(
      allocator,
      service,
    );
  }

  _dart_IOHIDDeviceCreate? _IOHIDDeviceCreate;

  ffi.Pointer<io_service_t> IOHIDDeviceGetService(
    ffi.Pointer<IOHIDDevice> device,
  ) {
    return (_IOHIDDeviceGetService ??= _dylib.lookupFunction<
        _c_IOHIDDeviceGetService,
        _dart_IOHIDDeviceGetService>('IOHIDDeviceGetService'))(
      device,
    );
  }

  _dart_IOHIDDeviceGetService? _IOHIDDeviceGetService;

  int IOHIDDeviceOpen(
    ffi.Pointer<IOHIDDevice> device,
    int options,
  ) {
    return (_IOHIDDeviceOpen ??=
        _dylib.lookupFunction<_c_IOHIDDeviceOpen, _dart_IOHIDDeviceOpen>(
            'IOHIDDeviceOpen'))(
      device,
      options,
    );
  }

  _dart_IOHIDDeviceOpen? _IOHIDDeviceOpen;

  int IOHIDDeviceClose(
    ffi.Pointer<IOHIDDevice> device,
    int options,
  ) {
    return (_IOHIDDeviceClose ??=
        _dylib.lookupFunction<_c_IOHIDDeviceClose, _dart_IOHIDDeviceClose>(
            'IOHIDDeviceClose'))(
      device,
      options,
    );
  }

  _dart_IOHIDDeviceClose? _IOHIDDeviceClose;

  ffi.Pointer<ffi.Void> IOHIDDeviceGetProperty(
    ffi.Pointer<IOHIDDevice> device,
    ffi.Pointer<CFStringRef> key,
  ) {
    return (_IOHIDDeviceGetProperty ??= _dylib.lookupFunction<
        _c_IOHIDDeviceGetProperty,
        _dart_IOHIDDeviceGetProperty>('IOHIDDeviceGetProperty'))(
      device,
      key,
    );
  }

  _dart_IOHIDDeviceGetProperty? _IOHIDDeviceGetProperty;

  int IOHIDDeviceSetReport(
    ffi.Pointer<IOHIDDevice> device,
    int reportType,
    int reportID,
    ffi.Pointer<ffi.Uint8> report,
    int reportLength,
  ) {
    return (_IOHIDDeviceSetReport ??= _dylib.lookupFunction<
        _c_IOHIDDeviceSetReport,
        _dart_IOHIDDeviceSetReport>('IOHIDDeviceSetReport'))(
      device,
      reportType,
      reportID,
      report,
      reportLength,
    );
  }

  _dart_IOHIDDeviceSetReport? _IOHIDDeviceSetReport;

  ffi.Pointer<IOHIDManager> IOHIDManagerCreate(
    ffi.Pointer<CFAllocator> allocator,
    int options,
  ) {
    return (_IOHIDManagerCreate ??=
        _dylib.lookupFunction<_c_IOHIDManagerCreate, _dart_IOHIDManagerCreate>(
            'IOHIDManagerCreate'))(
      allocator,
      options,
    );
  }

  _dart_IOHIDManagerCreate? _IOHIDManagerCreate;

  int IOHIDManagerClose(
    ffi.Pointer<IOHIDManager> manager,
    int options,
  ) {
    return (_IOHIDManagerClose ??=
        _dylib.lookupFunction<_c_IOHIDManagerClose, _dart_IOHIDManagerClose>(
            'IOHIDManagerClose'))(
      manager,
      options,
    );
  }

  _dart_IOHIDManagerClose? _IOHIDManagerClose;

  void IOHIDManagerSetDeviceMatching(
    ffi.Pointer<IOHIDManager> manager,
    ffi.Pointer<CFDictionaryRef> matching,
  ) {
    return (_IOHIDManagerSetDeviceMatching ??= _dylib.lookupFunction<
        _c_IOHIDManagerSetDeviceMatching,
        _dart_IOHIDManagerSetDeviceMatching>('IOHIDManagerSetDeviceMatching'))(
      manager,
      matching,
    );
  }

  _dart_IOHIDManagerSetDeviceMatching? _IOHIDManagerSetDeviceMatching;

  ffi.Pointer<CFSetRef> IOHIDManagerCopyDevices(
    ffi.Pointer<IOHIDManager> manager,
  ) {
    return (_IOHIDManagerCopyDevices ??= _dylib.lookupFunction<
        _c_IOHIDManagerCopyDevices,
        _dart_IOHIDManagerCopyDevices>('IOHIDManagerCopyDevices'))(
      manager,
    );
  }

  _dart_IOHIDManagerCopyDevices? _IOHIDManagerCopyDevices;

  int IOObjectRelease(
    ffi.Pointer<io_service_t> object,
  ) {
    return (_IOObjectRelease ??=
        _dylib.lookupFunction<_c_IOObjectRelease, _dart_IOObjectRelease>(
            'IOObjectRelease'))(
      object,
    );
  }

  _dart_IOObjectRelease? _IOObjectRelease;

  ffi.Pointer<io_service_t> IORegistryEntryFromPath(
    ffi.Pointer<mach_port_t> masterPort,
    ffi.Pointer<ffi.Int8> path,
  ) {
    return (_IORegistryEntryFromPath ??= _dylib.lookupFunction<
        _c_IORegistryEntryFromPath,
        _dart_IORegistryEntryFromPath>('IORegistryEntryFromPath'))(
      masterPort,
      path,
    );
  }

  _dart_IORegistryEntryFromPath? _IORegistryEntryFromPath;

  int IORegistryEntryGetPath(
    ffi.Pointer<io_service_t> entry,
    ffi.Pointer<ffi.Int8> plane,
    ffi.Pointer<ffi.Int8> path,
  ) {
    return (_IORegistryEntryGetPath ??= _dylib.lookupFunction<
        _c_IORegistryEntryGetPath,
        _dart_IORegistryEntryGetPath>('IORegistryEntryGetPath'))(
      entry,
      plane,
      path,
    );
  }

  _dart_IORegistryEntryGetPath? _IORegistryEntryGetPath;
}

class IOHIDDevice extends ffi.Opaque {}

class CFAllocator extends ffi.Opaque {}

class io_service_t extends ffi.Opaque {}

class CFStringRef extends ffi.Opaque {}

class IOHIDManager extends ffi.Opaque {}

class CFDictionaryRef extends ffi.Opaque {}

class CFSetRef extends ffi.Opaque {}

class mach_port_t extends ffi.Opaque {}

const int kIOReturnSuccess = 0;

const String kIOServicePlane = 'IOService';

const String kIOHIDVendorIDKey = 'VendorID';

const String kIOHIDProductIDKey = 'ProductID';

const String kIOHIDDeviceUsagePairsKey = 'DeviceUsagePairs';

const String kIOHIDDeviceUsageKey = 'DeviceUsage';

const String kIOHIDDeviceUsagePageKey = 'DeviceUsagePage';

typedef _c_IOHIDDeviceCreate = ffi.Pointer<IOHIDDevice> Function(
  ffi.Pointer<CFAllocator> allocator,
  ffi.Pointer<io_service_t> service,
);

typedef _dart_IOHIDDeviceCreate = ffi.Pointer<IOHIDDevice> Function(
  ffi.Pointer<CFAllocator> allocator,
  ffi.Pointer<io_service_t> service,
);

typedef _c_IOHIDDeviceGetService = ffi.Pointer<io_service_t> Function(
  ffi.Pointer<IOHIDDevice> device,
);

typedef _dart_IOHIDDeviceGetService = ffi.Pointer<io_service_t> Function(
  ffi.Pointer<IOHIDDevice> device,
);

typedef _c_IOHIDDeviceOpen = ffi.Int32 Function(
  ffi.Pointer<IOHIDDevice> device,
  ffi.Uint32 options,
);

typedef _dart_IOHIDDeviceOpen = int Function(
  ffi.Pointer<IOHIDDevice> device,
  int options,
);

typedef _c_IOHIDDeviceClose = ffi.Int32 Function(
  ffi.Pointer<IOHIDDevice> device,
  ffi.Uint32 options,
);

typedef _dart_IOHIDDeviceClose = int Function(
  ffi.Pointer<IOHIDDevice> device,
  int options,
);

typedef _c_IOHIDDeviceGetProperty = ffi.Pointer<ffi.Void> Function(
  ffi.Pointer<IOHIDDevice> device,
  ffi.Pointer<CFStringRef> key,
);

typedef _dart_IOHIDDeviceGetProperty = ffi.Pointer<ffi.Void> Function(
  ffi.Pointer<IOHIDDevice> device,
  ffi.Pointer<CFStringRef> key,
);

typedef _c_IOHIDDeviceSetReport = ffi.Int32 Function(
  ffi.Pointer<IOHIDDevice> device,
  ffi.Int32 reportType,
  ffi.Int64 reportID,
  ffi.Pointer<ffi.Uint8> report,
  ffi.Int64 reportLength,
);

typedef _dart_IOHIDDeviceSetReport = int Function(
  ffi.Pointer<IOHIDDevice> device,
  int reportType,
  int reportID,
  ffi.Pointer<ffi.Uint8> report,
  int reportLength,
);

typedef _c_IOHIDManagerCreate = ffi.Pointer<IOHIDManager> Function(
  ffi.Pointer<CFAllocator> allocator,
  ffi.Uint32 options,
);

typedef _dart_IOHIDManagerCreate = ffi.Pointer<IOHIDManager> Function(
  ffi.Pointer<CFAllocator> allocator,
  int options,
);

typedef _c_IOHIDManagerClose = ffi.Int32 Function(
  ffi.Pointer<IOHIDManager> manager,
  ffi.Uint32 options,
);

typedef _dart_IOHIDManagerClose = int Function(
  ffi.Pointer<IOHIDManager> manager,
  int options,
);

typedef _c_IOHIDManagerSetDeviceMatching = ffi.Void Function(
  ffi.Pointer<IOHIDManager> manager,
  ffi.Pointer<CFDictionaryRef> matching,
);

typedef _dart_IOHIDManagerSetDeviceMatching = void Function(
  ffi.Pointer<IOHIDManager> manager,
  ffi.Pointer<CFDictionaryRef> matching,
);

typedef _c_IOHIDManagerCopyDevices = ffi.Pointer<CFSetRef> Function(
  ffi.Pointer<IOHIDManager> manager,
);

typedef _dart_IOHIDManagerCopyDevices = ffi.Pointer<CFSetRef> Function(
  ffi.Pointer<IOHIDManager> manager,
);

typedef _c_IOObjectRelease = ffi.Int32 Function(
  ffi.Pointer<io_service_t> object,
);

typedef _dart_IOObjectRelease = int Function(
  ffi.Pointer<io_service_t> object,
);

typedef _c_IORegistryEntryFromPath = ffi.Pointer<io_service_t> Function(
  ffi.Pointer<mach_port_t> masterPort,
  ffi.Pointer<ffi.Int8> path,
);

typedef _dart_IORegistryEntryFromPath = ffi.Pointer<io_service_t> Function(
  ffi.Pointer<mach_port_t> masterPort,
  ffi.Pointer<ffi.Int8> path,
);

typedef _c_IORegistryEntryGetPath = ffi.Int32 Function(
  ffi.Pointer<io_service_t> entry,
  ffi.Pointer<ffi.Int8> plane,
  ffi.Pointer<ffi.Int8> path,
);

typedef _dart_IORegistryEntryGetPath = int Function(
  ffi.Pointer<io_service_t> entry,
  ffi.Pointer<ffi.Int8> plane,
  ffi.Pointer<ffi.Int8> path,
);
