// AUTO GENERATED FILE, DO NOT EDIT.
//
// Generated by `package:ffigen`.
import 'dart:ffi' as ffi;

/// Bindings to `IOKit.h`.
class IOKit {
  /// Holds the symbol lookup function.
  final ffi.Pointer<T> Function<T extends ffi.NativeType>(String symbolName)
      _lookup;

  /// The symbols are looked up in [dynamicLibrary].
  IOKit(ffi.DynamicLibrary dynamicLibrary) : _lookup = dynamicLibrary.lookup;

  /// The symbols are looked up with [lookup].
  IOKit.fromLookup(
      ffi.Pointer<T> Function<T extends ffi.NativeType>(String symbolName)
          lookup)
      : _lookup = lookup;

  IOHIDDeviceRef IOHIDDeviceCreate(
    CFAllocatorRef allocator,
    io_service_t service,
  ) {
    return _IOHIDDeviceCreate(
      allocator,
      service,
    );
  }

  late final _IOHIDDeviceCreatePtr = _lookup<
      ffi.NativeFunction<
          IOHIDDeviceRef Function(
              CFAllocatorRef, io_service_t)>>('IOHIDDeviceCreate');
  late final _IOHIDDeviceCreate = _IOHIDDeviceCreatePtr.asFunction<
      IOHIDDeviceRef Function(CFAllocatorRef, io_service_t)>();

  io_service_t IOHIDDeviceGetService(
    IOHIDDeviceRef device,
  ) {
    return _IOHIDDeviceGetService(
      device,
    );
  }

  late final _IOHIDDeviceGetServicePtr =
      _lookup<ffi.NativeFunction<io_service_t Function(IOHIDDeviceRef)>>(
          'IOHIDDeviceGetService');
  late final _IOHIDDeviceGetService = _IOHIDDeviceGetServicePtr.asFunction<
      io_service_t Function(IOHIDDeviceRef)>();

  int IOHIDDeviceOpen(
    IOHIDDeviceRef device,
    int options,
  ) {
    return _IOHIDDeviceOpen(
      device,
      options,
    );
  }

  late final _IOHIDDeviceOpenPtr = _lookup<
          ffi.NativeFunction<IOReturn Function(IOHIDDeviceRef, IOOptionBits)>>(
      'IOHIDDeviceOpen');
  late final _IOHIDDeviceOpen =
      _IOHIDDeviceOpenPtr.asFunction<int Function(IOHIDDeviceRef, int)>();

  int IOHIDDeviceClose(
    IOHIDDeviceRef device,
    int options,
  ) {
    return _IOHIDDeviceClose(
      device,
      options,
    );
  }

  late final _IOHIDDeviceClosePtr = _lookup<
          ffi.NativeFunction<IOReturn Function(IOHIDDeviceRef, IOOptionBits)>>(
      'IOHIDDeviceClose');
  late final _IOHIDDeviceClose =
      _IOHIDDeviceClosePtr.asFunction<int Function(IOHIDDeviceRef, int)>();

  CFTypeRef IOHIDDeviceGetProperty(
    IOHIDDeviceRef device,
    CFStringRef key,
  ) {
    return _IOHIDDeviceGetProperty(
      device,
      key,
    );
  }

  late final _IOHIDDeviceGetPropertyPtr = _lookup<
          ffi.NativeFunction<CFTypeRef Function(IOHIDDeviceRef, CFStringRef)>>(
      'IOHIDDeviceGetProperty');
  late final _IOHIDDeviceGetProperty = _IOHIDDeviceGetPropertyPtr.asFunction<
      CFTypeRef Function(IOHIDDeviceRef, CFStringRef)>();

  int IOHIDDeviceSetReport(
    IOHIDDeviceRef device,
    int reportType,
    int reportID,
    ffi.Pointer<ffi.Uint8> report,
    int reportLength,
  ) {
    return _IOHIDDeviceSetReport(
      device,
      reportType,
      reportID,
      report,
      reportLength,
    );
  }

  late final _IOHIDDeviceSetReportPtr = _lookup<
      ffi.NativeFunction<
          IOReturn Function(IOHIDDeviceRef, ffi.Int32, CFIndex,
              ffi.Pointer<ffi.Uint8>, CFIndex)>>('IOHIDDeviceSetReport');
  late final _IOHIDDeviceSetReport = _IOHIDDeviceSetReportPtr.asFunction<
      int Function(IOHIDDeviceRef, int, int, ffi.Pointer<ffi.Uint8>, int)>();

  IOHIDManagerRef IOHIDManagerCreate(
    CFAllocatorRef allocator,
    int options,
  ) {
    return _IOHIDManagerCreate(
      allocator,
      options,
    );
  }

  late final _IOHIDManagerCreatePtr = _lookup<
      ffi.NativeFunction<
          IOHIDManagerRef Function(
              CFAllocatorRef, IOOptionBits)>>('IOHIDManagerCreate');
  late final _IOHIDManagerCreate = _IOHIDManagerCreatePtr.asFunction<
      IOHIDManagerRef Function(CFAllocatorRef, int)>();

  int IOHIDManagerClose(
    IOHIDManagerRef manager,
    int options,
  ) {
    return _IOHIDManagerClose(
      manager,
      options,
    );
  }

  late final _IOHIDManagerClosePtr = _lookup<
          ffi.NativeFunction<IOReturn Function(IOHIDManagerRef, IOOptionBits)>>(
      'IOHIDManagerClose');
  late final _IOHIDManagerClose =
      _IOHIDManagerClosePtr.asFunction<int Function(IOHIDManagerRef, int)>();

  void IOHIDManagerSetDeviceMatching(
    IOHIDManagerRef manager,
    CFDictionaryRef matching,
  ) {
    return _IOHIDManagerSetDeviceMatching(
      manager,
      matching,
    );
  }

  late final _IOHIDManagerSetDeviceMatchingPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(IOHIDManagerRef,
              CFDictionaryRef)>>('IOHIDManagerSetDeviceMatching');
  late final _IOHIDManagerSetDeviceMatching = _IOHIDManagerSetDeviceMatchingPtr
      .asFunction<void Function(IOHIDManagerRef, CFDictionaryRef)>();

  CFSetRef IOHIDManagerCopyDevices(
    IOHIDManagerRef manager,
  ) {
    return _IOHIDManagerCopyDevices(
      manager,
    );
  }

  late final _IOHIDManagerCopyDevicesPtr =
      _lookup<ffi.NativeFunction<CFSetRef Function(IOHIDManagerRef)>>(
          'IOHIDManagerCopyDevices');
  late final _IOHIDManagerCopyDevices = _IOHIDManagerCopyDevicesPtr.asFunction<
      CFSetRef Function(IOHIDManagerRef)>();

  int IOObjectRelease(
    io_object_t object,
  ) {
    return _IOObjectRelease(
      object,
    );
  }

  late final _IOObjectReleasePtr =
      _lookup<ffi.NativeFunction<kern_return_t Function(io_object_t)>>(
          'IOObjectRelease');
  late final _IOObjectRelease =
      _IOObjectReleasePtr.asFunction<int Function(io_object_t)>();

  io_registry_entry_t IORegistryEntryFromPath(
    mach_port_t masterPort,
    ffi.Pointer<ffi.Int8> path,
  ) {
    return _IORegistryEntryFromPath(
      masterPort,
      path,
    );
  }

  late final _IORegistryEntryFromPathPtr = _lookup<
      ffi.NativeFunction<
          io_registry_entry_t Function(
              mach_port_t, ffi.Pointer<ffi.Int8>)>>('IORegistryEntryFromPath');
  late final _IORegistryEntryFromPath = _IORegistryEntryFromPathPtr.asFunction<
      io_registry_entry_t Function(mach_port_t, ffi.Pointer<ffi.Int8>)>();

  int IORegistryEntryGetPath(
    io_registry_entry_t entry,
    ffi.Pointer<ffi.Int8> plane,
    ffi.Pointer<ffi.Int8> path,
  ) {
    return _IORegistryEntryGetPath(
      entry,
      plane,
      path,
    );
  }

  late final _IORegistryEntryGetPathPtr = _lookup<
      ffi.NativeFunction<
          kern_return_t Function(io_registry_entry_t, ffi.Pointer<ffi.Int8>,
              ffi.Pointer<ffi.Int8>)>>('IORegistryEntryGetPath');
  late final _IORegistryEntryGetPath = _IORegistryEntryGetPathPtr.asFunction<
      int Function(
          io_registry_entry_t, ffi.Pointer<ffi.Int8>, ffi.Pointer<ffi.Int8>)>();
}

typedef IOHIDDeviceRef = ffi.Pointer<__IOHIDDevice>;

class __IOHIDDevice extends ffi.Opaque {}

typedef CFAllocatorRef = ffi.Pointer<__CFAllocator>;

class __CFAllocator extends ffi.Opaque {}

typedef io_service_t = io_object_t;
typedef io_object_t = ffi.Pointer<OSObject>;

class OSObject extends ffi.Opaque {}

typedef IOReturn = kern_return_t;
typedef kern_return_t = ffi.Int32;
typedef IOOptionBits = UInt32;
typedef UInt32 = ffi.Uint32;
typedef CFTypeRef = ffi.Pointer<ffi.Void>;
typedef CFStringRef = ffi.Pointer<__CFString>;

class __CFString extends ffi.Opaque {}

abstract class IOHIDReportType {
  static const int kIOHIDReportTypeInput = 0;
  static const int kIOHIDReportTypeOutput = 1;
  static const int kIOHIDReportTypeFeature = 2;
  static const int kIOHIDReportTypeCount = 3;
}

typedef CFIndex = ffi.Int64;
typedef IOHIDManagerRef = ffi.Pointer<__IOHIDManager>;

class __IOHIDManager extends ffi.Opaque {}

typedef CFDictionaryRef = ffi.Pointer<__CFDictionary>;

class __CFDictionary extends ffi.Opaque {}

typedef CFSetRef = ffi.Pointer<__CFSet>;

class __CFSet extends ffi.Opaque {}

typedef io_registry_entry_t = io_object_t;
typedef mach_port_t = ipc_port_t;
typedef ipc_port_t = ffi.Pointer<ipc_port>;

class ipc_port extends ffi.Opaque {}

const int kIOReturnSuccess = 0;

const String kIOServicePlane = 'IOService';

const String kIOHIDVendorIDKey = 'VendorID';

const String kIOHIDProductIDKey = 'ProductID';

const String kIOHIDDeviceUsagePairsKey = 'DeviceUsagePairs';

const String kIOHIDDeviceUsageKey = 'DeviceUsage';

const String kIOHIDDeviceUsagePageKey = 'DeviceUsagePage';
