// AUTO GENERATED FILE, DO NOT EDIT.
//
// Generated by `package:ffigen`.
import 'dart:ffi' as ffi;

/// Bindings to `IOKit.h`.
class IOKit {
  /// Holds the Dynamic library.
  final ffi.DynamicLibrary _dylib;

  /// The symbols are looked up in [dynamicLibrary].
  IOKit(ffi.DynamicLibrary dynamicLibrary) : _dylib = dynamicLibrary;

  ffi.Pointer<IOHIDDevice> IOHIDDeviceCreate(
    ffi.Pointer<CFAllocator> allocator,
    ffi.Pointer<io_service_t> service,
  ) {
    return (_IOHIDDeviceCreate ??=
        _dylib.lookupFunction<_c_IOHIDDeviceCreate, _dart_IOHIDDeviceCreate>(
            'IOHIDDeviceCreate'))(
      allocator,
      service,
    );
  }

  _dart_IOHIDDeviceCreate? _IOHIDDeviceCreate;

  int IOHIDDeviceOpen(
    ffi.Pointer<IOHIDDevice> device,
    int options,
  ) {
    return (_IOHIDDeviceOpen ??=
        _dylib.lookupFunction<_c_IOHIDDeviceOpen, _dart_IOHIDDeviceOpen>(
            'IOHIDDeviceOpen'))(
      device,
      options,
    );
  }

  _dart_IOHIDDeviceOpen? _IOHIDDeviceOpen;

  int IOHIDDeviceClose(
    ffi.Pointer<IOHIDDevice> device,
    int options,
  ) {
    return (_IOHIDDeviceClose ??=
        _dylib.lookupFunction<_c_IOHIDDeviceClose, _dart_IOHIDDeviceClose>(
            'IOHIDDeviceClose'))(
      device,
      options,
    );
  }

  _dart_IOHIDDeviceClose? _IOHIDDeviceClose;

  int IOHIDDeviceSetReport(
    ffi.Pointer<IOHIDDevice> device,
    int reportType,
    int reportID,
    ffi.Pointer<ffi.Uint8> report,
    int reportLength,
  ) {
    return (_IOHIDDeviceSetReport ??= _dylib.lookupFunction<
        _c_IOHIDDeviceSetReport,
        _dart_IOHIDDeviceSetReport>('IOHIDDeviceSetReport'))(
      device,
      reportType,
      reportID,
      report,
      reportLength,
    );
  }

  _dart_IOHIDDeviceSetReport? _IOHIDDeviceSetReport;

  int IOObjectRelease(
    ffi.Pointer<io_service_t> object,
  ) {
    return (_IOObjectRelease ??=
        _dylib.lookupFunction<_c_IOObjectRelease, _dart_IOObjectRelease>(
            'IOObjectRelease'))(
      object,
    );
  }

  _dart_IOObjectRelease? _IOObjectRelease;

  ffi.Pointer<io_service_t> IORegistryEntryFromPath(
    ffi.Pointer<mach_port_t> masterPort,
    ffi.Pointer<ffi.Int8> path,
  ) {
    return (_IORegistryEntryFromPath ??= _dylib.lookupFunction<
        _c_IORegistryEntryFromPath,
        _dart_IORegistryEntryFromPath>('IORegistryEntryFromPath'))(
      masterPort,
      path,
    );
  }

  _dart_IORegistryEntryFromPath? _IORegistryEntryFromPath;
}

class IOHIDDevice extends ffi.Opaque {}

class CFAllocator extends ffi.Opaque {}

class io_service_t extends ffi.Opaque {}

class mach_port_t extends ffi.Opaque {}

const int kIOReturnSuccess = 0;

typedef _c_IOHIDDeviceCreate = ffi.Pointer<IOHIDDevice> Function(
  ffi.Pointer<CFAllocator> allocator,
  ffi.Pointer<io_service_t> service,
);

typedef _dart_IOHIDDeviceCreate = ffi.Pointer<IOHIDDevice> Function(
  ffi.Pointer<CFAllocator> allocator,
  ffi.Pointer<io_service_t> service,
);

typedef _c_IOHIDDeviceOpen = ffi.Int32 Function(
  ffi.Pointer<IOHIDDevice> device,
  ffi.Uint32 options,
);

typedef _dart_IOHIDDeviceOpen = int Function(
  ffi.Pointer<IOHIDDevice> device,
  int options,
);

typedef _c_IOHIDDeviceClose = ffi.Int32 Function(
  ffi.Pointer<IOHIDDevice> device,
  ffi.Uint32 options,
);

typedef _dart_IOHIDDeviceClose = int Function(
  ffi.Pointer<IOHIDDevice> device,
  int options,
);

typedef _c_IOHIDDeviceSetReport = ffi.Int32 Function(
  ffi.Pointer<IOHIDDevice> device,
  ffi.Int32 reportType,
  ffi.Int64 reportID,
  ffi.Pointer<ffi.Uint8> report,
  ffi.Int64 reportLength,
);

typedef _dart_IOHIDDeviceSetReport = int Function(
  ffi.Pointer<IOHIDDevice> device,
  int reportType,
  int reportID,
  ffi.Pointer<ffi.Uint8> report,
  int reportLength,
);

typedef _c_IOObjectRelease = ffi.Int32 Function(
  ffi.Pointer<io_service_t> object,
);

typedef _dart_IOObjectRelease = int Function(
  ffi.Pointer<io_service_t> object,
);

typedef _c_IORegistryEntryFromPath = ffi.Pointer<io_service_t> Function(
  ffi.Pointer<mach_port_t> masterPort,
  ffi.Pointer<ffi.Int8> path,
);

typedef _dart_IORegistryEntryFromPath = ffi.Pointer<io_service_t> Function(
  ffi.Pointer<mach_port_t> masterPort,
  ffi.Pointer<ffi.Int8> path,
);
