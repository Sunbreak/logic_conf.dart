// AUTO GENERATED FILE, DO NOT EDIT.
//
// Generated by `package:ffigen`.
import 'dart:ffi' as ffi;

/// Bindings to `CoreFoundation.h`.
class CoreFoundation {
  /// Holds the symbol lookup function.
  final ffi.Pointer<T> Function<T extends ffi.NativeType>(String symbolName)
      _lookup;

  /// The symbols are looked up in [dynamicLibrary].
  CoreFoundation(ffi.DynamicLibrary dynamicLibrary)
      : _lookup = dynamicLibrary.lookup;

  /// The symbols are looked up with [lookup].
  CoreFoundation.fromLookup(
      ffi.Pointer<T> Function<T extends ffi.NativeType>(String symbolName)
          lookup)
      : _lookup = lookup;

  int CFGetTypeID(
    ffi.Pointer<ffi.Void> cf,
  ) {
    return _CFGetTypeID(
      cf,
    );
  }

  late final _CFGetTypeID_ptr =
      _lookup<ffi.NativeFunction<_c_CFGetTypeID>>('CFGetTypeID');
  late final _dart_CFGetTypeID _CFGetTypeID =
      _CFGetTypeID_ptr.asFunction<_dart_CFGetTypeID>();

  void CFRelease(
    ffi.Pointer<ffi.Void> cf,
  ) {
    return _CFRelease(
      cf,
    );
  }

  late final _CFRelease_ptr =
      _lookup<ffi.NativeFunction<_c_CFRelease>>('CFRelease');
  late final _dart_CFRelease _CFRelease =
      _CFRelease_ptr.asFunction<_dart_CFRelease>();

  int CFNumberGetTypeID() {
    return _CFNumberGetTypeID();
  }

  late final _CFNumberGetTypeID_ptr =
      _lookup<ffi.NativeFunction<_c_CFNumberGetTypeID>>('CFNumberGetTypeID');
  late final _dart_CFNumberGetTypeID _CFNumberGetTypeID =
      _CFNumberGetTypeID_ptr.asFunction<_dart_CFNumberGetTypeID>();

  int CFNumberGetValue(
    ffi.Pointer<CFNumberRef> number,
    int theType,
    ffi.Pointer<ffi.Void> valuePtr,
  ) {
    return _CFNumberGetValue(
      number,
      theType,
      valuePtr,
    );
  }

  late final _CFNumberGetValue_ptr =
      _lookup<ffi.NativeFunction<_c_CFNumberGetValue>>('CFNumberGetValue');
  late final _dart_CFNumberGetValue _CFNumberGetValue =
      _CFNumberGetValue_ptr.asFunction<_dart_CFNumberGetValue>();

  int CFArrayGetTypeID() {
    return _CFArrayGetTypeID();
  }

  late final _CFArrayGetTypeID_ptr =
      _lookup<ffi.NativeFunction<_c_CFArrayGetTypeID>>('CFArrayGetTypeID');
  late final _dart_CFArrayGetTypeID _CFArrayGetTypeID =
      _CFArrayGetTypeID_ptr.asFunction<_dart_CFArrayGetTypeID>();

  int CFArrayGetCount(
    ffi.Pointer<CFArrayRef> theArray,
  ) {
    return _CFArrayGetCount(
      theArray,
    );
  }

  late final _CFArrayGetCount_ptr =
      _lookup<ffi.NativeFunction<_c_CFArrayGetCount>>('CFArrayGetCount');
  late final _dart_CFArrayGetCount _CFArrayGetCount =
      _CFArrayGetCount_ptr.asFunction<_dart_CFArrayGetCount>();

  ffi.Pointer<ffi.Void> CFArrayGetValueAtIndex(
    ffi.Pointer<CFArrayRef> theArray,
    int idx,
  ) {
    return _CFArrayGetValueAtIndex(
      theArray,
      idx,
    );
  }

  late final _CFArrayGetValueAtIndex_ptr =
      _lookup<ffi.NativeFunction<_c_CFArrayGetValueAtIndex>>(
          'CFArrayGetValueAtIndex');
  late final _dart_CFArrayGetValueAtIndex _CFArrayGetValueAtIndex =
      _CFArrayGetValueAtIndex_ptr.asFunction<_dart_CFArrayGetValueAtIndex>();

  int CFDictionaryGetTypeID() {
    return _CFDictionaryGetTypeID();
  }

  late final _CFDictionaryGetTypeID_ptr =
      _lookup<ffi.NativeFunction<_c_CFDictionaryGetTypeID>>(
          'CFDictionaryGetTypeID');
  late final _dart_CFDictionaryGetTypeID _CFDictionaryGetTypeID =
      _CFDictionaryGetTypeID_ptr.asFunction<_dart_CFDictionaryGetTypeID>();

  int CFDictionaryGetValueIfPresent(
    ffi.Pointer<CFDictionaryRef> theDict,
    ffi.Pointer<ffi.Void> key,
    ffi.Pointer<ffi.Pointer<ffi.Void>> value,
  ) {
    return _CFDictionaryGetValueIfPresent(
      theDict,
      key,
      value,
    );
  }

  late final _CFDictionaryGetValueIfPresent_ptr =
      _lookup<ffi.NativeFunction<_c_CFDictionaryGetValueIfPresent>>(
          'CFDictionaryGetValueIfPresent');
  late final _dart_CFDictionaryGetValueIfPresent
      _CFDictionaryGetValueIfPresent = _CFDictionaryGetValueIfPresent_ptr
          .asFunction<_dart_CFDictionaryGetValueIfPresent>();

  int CFSetGetCount(
    ffi.Pointer<CFSetRef> theSet,
  ) {
    return _CFSetGetCount(
      theSet,
    );
  }

  late final _CFSetGetCount_ptr =
      _lookup<ffi.NativeFunction<_c_CFSetGetCount>>('CFSetGetCount');
  late final _dart_CFSetGetCount _CFSetGetCount =
      _CFSetGetCount_ptr.asFunction<_dart_CFSetGetCount>();

  void CFSetGetValues(
    ffi.Pointer<CFSetRef> theSet,
    ffi.Pointer<ffi.Pointer<ffi.Void>> values,
  ) {
    return _CFSetGetValues(
      theSet,
      values,
    );
  }

  late final _CFSetGetValues_ptr =
      _lookup<ffi.NativeFunction<_c_CFSetGetValues>>('CFSetGetValues');
  late final _dart_CFSetGetValues _CFSetGetValues =
      _CFSetGetValues_ptr.asFunction<_dart_CFSetGetValues>();

  ffi.Pointer<CFStringRef> CFStringCreateWithCString(
    ffi.Pointer<CFAllocatorRef> alloc,
    ffi.Pointer<ffi.Int8> cStr,
    int encoding,
  ) {
    return _CFStringCreateWithCString(
      alloc,
      cStr,
      encoding,
    );
  }

  late final _CFStringCreateWithCString_ptr =
      _lookup<ffi.NativeFunction<_c_CFStringCreateWithCString>>(
          'CFStringCreateWithCString');
  late final _dart_CFStringCreateWithCString _CFStringCreateWithCString =
      _CFStringCreateWithCString_ptr.asFunction<
          _dart_CFStringCreateWithCString>();
}

class CFNumberRef extends ffi.Opaque {}

class CFArrayRef extends ffi.Opaque {}

class CFDictionaryRef extends ffi.Opaque {}

class CFSetRef extends ffi.Opaque {}

class CFStringRef extends ffi.Opaque {}

class CFAllocatorRef extends ffi.Opaque {}

typedef _c_CFGetTypeID = ffi.Uint64 Function(
  ffi.Pointer<ffi.Void> cf,
);

typedef _dart_CFGetTypeID = int Function(
  ffi.Pointer<ffi.Void> cf,
);

typedef _c_CFRelease = ffi.Void Function(
  ffi.Pointer<ffi.Void> cf,
);

typedef _dart_CFRelease = void Function(
  ffi.Pointer<ffi.Void> cf,
);

typedef _c_CFNumberGetTypeID = ffi.Uint64 Function();

typedef _dart_CFNumberGetTypeID = int Function();

typedef _c_CFNumberGetValue = ffi.Uint8 Function(
  ffi.Pointer<CFNumberRef> number,
  ffi.Int64 theType,
  ffi.Pointer<ffi.Void> valuePtr,
);

typedef _dart_CFNumberGetValue = int Function(
  ffi.Pointer<CFNumberRef> number,
  int theType,
  ffi.Pointer<ffi.Void> valuePtr,
);

typedef _c_CFArrayGetTypeID = ffi.Uint64 Function();

typedef _dart_CFArrayGetTypeID = int Function();

typedef _c_CFArrayGetCount = ffi.Int64 Function(
  ffi.Pointer<CFArrayRef> theArray,
);

typedef _dart_CFArrayGetCount = int Function(
  ffi.Pointer<CFArrayRef> theArray,
);

typedef _c_CFArrayGetValueAtIndex = ffi.Pointer<ffi.Void> Function(
  ffi.Pointer<CFArrayRef> theArray,
  ffi.Int64 idx,
);

typedef _dart_CFArrayGetValueAtIndex = ffi.Pointer<ffi.Void> Function(
  ffi.Pointer<CFArrayRef> theArray,
  int idx,
);

typedef _c_CFDictionaryGetTypeID = ffi.Uint64 Function();

typedef _dart_CFDictionaryGetTypeID = int Function();

typedef _c_CFDictionaryGetValueIfPresent = ffi.Uint8 Function(
  ffi.Pointer<CFDictionaryRef> theDict,
  ffi.Pointer<ffi.Void> key,
  ffi.Pointer<ffi.Pointer<ffi.Void>> value,
);

typedef _dart_CFDictionaryGetValueIfPresent = int Function(
  ffi.Pointer<CFDictionaryRef> theDict,
  ffi.Pointer<ffi.Void> key,
  ffi.Pointer<ffi.Pointer<ffi.Void>> value,
);

typedef _c_CFSetGetCount = ffi.Int64 Function(
  ffi.Pointer<CFSetRef> theSet,
);

typedef _dart_CFSetGetCount = int Function(
  ffi.Pointer<CFSetRef> theSet,
);

typedef _c_CFSetGetValues = ffi.Void Function(
  ffi.Pointer<CFSetRef> theSet,
  ffi.Pointer<ffi.Pointer<ffi.Void>> values,
);

typedef _dart_CFSetGetValues = void Function(
  ffi.Pointer<CFSetRef> theSet,
  ffi.Pointer<ffi.Pointer<ffi.Void>> values,
);

typedef _c_CFStringCreateWithCString = ffi.Pointer<CFStringRef> Function(
  ffi.Pointer<CFAllocatorRef> alloc,
  ffi.Pointer<ffi.Int8> cStr,
  ffi.Uint32 encoding,
);

typedef _dart_CFStringCreateWithCString = ffi.Pointer<CFStringRef> Function(
  ffi.Pointer<CFAllocatorRef> alloc,
  ffi.Pointer<ffi.Int8> cStr,
  int encoding,
);
