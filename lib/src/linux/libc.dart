// AUTO GENERATED FILE, DO NOT EDIT.
//
// Generated by `package:ffigen`.
import 'dart:ffi' as ffi;

/// Bindings to `libc.h`.
class LibC {
  /// Holds the symbol lookup function.
  final ffi.Pointer<T> Function<T extends ffi.NativeType>(String symbolName)
      _lookup;

  /// The symbols are looked up in [dynamicLibrary].
  LibC(ffi.DynamicLibrary dynamicLibrary) : _lookup = dynamicLibrary.lookup;

  /// The symbols are looked up with [lookup].
  LibC.fromLookup(
      ffi.Pointer<T> Function<T extends ffi.NativeType>(String symbolName)
          lookup)
      : _lookup = lookup;

  int open2(
    ffi.Pointer<ffi.Int8> __file,
    int __oflag,
  ) {
    return _open2(
      __file,
      __oflag,
    );
  }

  late final _open2_ptr = _lookup<ffi.NativeFunction<_c_open2>>('open');
  late final _dart_open2 _open2 = _open2_ptr.asFunction<_dart_open2>();

  int close(
    int __fd,
  ) {
    return _close(
      __fd,
    );
  }

  late final _close_ptr = _lookup<ffi.NativeFunction<_c_close>>('close');
  late final _dart_close _close = _close_ptr.asFunction<_dart_close>();

  int read(
    int __fd,
    ffi.Pointer<ffi.Void> __buf,
    int __nbytes,
  ) {
    return _read(
      __fd,
      __buf,
      __nbytes,
    );
  }

  late final _read_ptr = _lookup<ffi.NativeFunction<_c_read>>('read');
  late final _dart_read _read = _read_ptr.asFunction<_dart_read>();

  int write(
    int __fd,
    ffi.Pointer<ffi.Void> __buf,
    int __n,
  ) {
    return _write(
      __fd,
      __buf,
      __n,
    );
  }

  late final _write_ptr = _lookup<ffi.NativeFunction<_c_write>>('write');
  late final _dart_write _write = _write_ptr.asFunction<_dart_write>();
}

const int O_ACCMODE = 3;

const int O_RDONLY = 0;

const int O_WRONLY = 1;

const int O_RDWR = 2;

typedef _c_open2 = ffi.Int32 Function(
  ffi.Pointer<ffi.Int8> __file,
  ffi.Int32 __oflag,
);

typedef _dart_open2 = int Function(
  ffi.Pointer<ffi.Int8> __file,
  int __oflag,
);

typedef _c_close = ffi.Int32 Function(
  ffi.Int32 __fd,
);

typedef _dart_close = int Function(
  int __fd,
);

typedef _c_read = ffi.Int64 Function(
  ffi.Int32 __fd,
  ffi.Pointer<ffi.Void> __buf,
  ffi.Uint64 __nbytes,
);

typedef _dart_read = int Function(
  int __fd,
  ffi.Pointer<ffi.Void> __buf,
  int __nbytes,
);

typedef _c_write = ffi.Int64 Function(
  ffi.Int32 __fd,
  ffi.Pointer<ffi.Void> __buf,
  ffi.Uint64 __n,
);

typedef _dart_write = int Function(
  int __fd,
  ffi.Pointer<ffi.Void> __buf,
  int __n,
);
