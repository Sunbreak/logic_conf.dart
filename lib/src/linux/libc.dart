// AUTO GENERATED FILE, DO NOT EDIT.
//
// Generated by `package:ffigen`.
import 'dart:ffi' as ffi;

/// Bindings to `libc.h`.
class LibC {
  /// Holds the Dynamic library.
  final ffi.DynamicLibrary _dylib;

  /// The symbols are looked up in [dynamicLibrary].
  LibC(ffi.DynamicLibrary dynamicLibrary) : _dylib = dynamicLibrary;

  int open2(
    ffi.Pointer<ffi.Int8> __file,
    int __oflag,
  ) {
    return (_open2 ??= _dylib.lookupFunction<_c_open2, _dart_open2>('open'))(
      __file,
      __oflag,
    );
  }

  _dart_open2? _open2;

  int close(
    int __fd,
  ) {
    return (_close ??= _dylib.lookupFunction<_c_close, _dart_close>('close'))(
      __fd,
    );
  }

  _dart_close? _close;

  int write(
    int __fd,
    ffi.Pointer<ffi.Void> __buf,
    int __n,
  ) {
    return (_write ??= _dylib.lookupFunction<_c_write, _dart_write>('write'))(
      __fd,
      __buf,
      __n,
    );
  }

  _dart_write? _write;
}

const int O_ACCMODE = 3;

const int O_RDONLY = 0;

const int O_WRONLY = 1;

const int O_RDWR = 2;

typedef _c_open2 = ffi.Int32 Function(
  ffi.Pointer<ffi.Int8> __file,
  ffi.Int32 __oflag,
);

typedef _dart_open2 = int Function(
  ffi.Pointer<ffi.Int8> __file,
  int __oflag,
);

typedef _c_close = ffi.Int32 Function(
  ffi.Int32 __fd,
);

typedef _dart_close = int Function(
  int __fd,
);

typedef _c_write = ffi.Int64 Function(
  ffi.Int32 __fd,
  ffi.Pointer<ffi.Void> __buf,
  ffi.Uint64 __n,
);

typedef _dart_write = int Function(
  int __fd,
  ffi.Pointer<ffi.Void> __buf,
  int __n,
);
