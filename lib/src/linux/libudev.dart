// AUTO GENERATED FILE, DO NOT EDIT.
//
// Generated by `package:ffigen`.
import 'dart:ffi' as ffi;

/// Bindings to `libudev.h`.
class Libudev {
  /// Holds the symbol lookup function.
  final ffi.Pointer<T> Function<T extends ffi.NativeType>(String symbolName)
      _lookup;

  /// The symbols are looked up in [dynamicLibrary].
  Libudev(ffi.DynamicLibrary dynamicLibrary) : _lookup = dynamicLibrary.lookup;

  /// The symbols are looked up with [lookup].
  Libudev.fromLookup(
      ffi.Pointer<T> Function<T extends ffi.NativeType>(String symbolName)
          lookup)
      : _lookup = lookup;

  ffi.Pointer<udev> udev_unref(
    ffi.Pointer<udev> udev,
  ) {
    return _udev_unref(
      udev,
    );
  }

  late final _udev_unrefPtr = _lookup<
          ffi.NativeFunction<ffi.Pointer<udev> Function(ffi.Pointer<udev>)>>(
      'udev_unref');
  late final _udev_unref = _udev_unrefPtr
      .asFunction<ffi.Pointer<udev> Function(ffi.Pointer<udev>)>();

  ffi.Pointer<udev> udev_new() {
    return _udev_new();
  }

  late final _udev_newPtr =
      _lookup<ffi.NativeFunction<ffi.Pointer<udev> Function()>>('udev_new');
  late final _udev_new =
      _udev_newPtr.asFunction<ffi.Pointer<udev> Function()>();

  ffi.Pointer<udev_list_entry> udev_list_entry_get_next(
    ffi.Pointer<udev_list_entry> list_entry,
  ) {
    return _udev_list_entry_get_next(
      list_entry,
    );
  }

  late final _udev_list_entry_get_nextPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<udev_list_entry> Function(
              ffi.Pointer<udev_list_entry>)>>('udev_list_entry_get_next');
  late final _udev_list_entry_get_next =
      _udev_list_entry_get_nextPtr.asFunction<
          ffi.Pointer<udev_list_entry> Function(
              ffi.Pointer<udev_list_entry>)>();

  ffi.Pointer<ffi.Char> udev_list_entry_get_name(
    ffi.Pointer<udev_list_entry> list_entry,
  ) {
    return _udev_list_entry_get_name(
      list_entry,
    );
  }

  late final _udev_list_entry_get_namePtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ffi.Char> Function(
              ffi.Pointer<udev_list_entry>)>>('udev_list_entry_get_name');
  late final _udev_list_entry_get_name =
      _udev_list_entry_get_namePtr.asFunction<
          ffi.Pointer<ffi.Char> Function(ffi.Pointer<udev_list_entry>)>();

  ffi.Pointer<udev_device> udev_device_unref(
    ffi.Pointer<udev_device> udev_device,
  ) {
    return _udev_device_unref(
      udev_device,
    );
  }

  late final _udev_device_unrefPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<udev_device> Function(
              ffi.Pointer<udev_device>)>>('udev_device_unref');
  late final _udev_device_unref = _udev_device_unrefPtr.asFunction<
      ffi.Pointer<udev_device> Function(ffi.Pointer<udev_device>)>();

  ffi.Pointer<udev_device> udev_device_new_from_syspath(
    ffi.Pointer<udev> udev,
    ffi.Pointer<ffi.Char> syspath,
  ) {
    return _udev_device_new_from_syspath(
      udev,
      syspath,
    );
  }

  late final _udev_device_new_from_syspathPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<udev_device> Function(ffi.Pointer<udev>,
              ffi.Pointer<ffi.Char>)>>('udev_device_new_from_syspath');
  late final _udev_device_new_from_syspath =
      _udev_device_new_from_syspathPtr.asFunction<
          ffi.Pointer<udev_device> Function(
              ffi.Pointer<udev>, ffi.Pointer<ffi.Char>)>();

  ffi.Pointer<udev_device> udev_device_get_parent_with_subsystem_devtype(
    ffi.Pointer<udev_device> udev_device,
    ffi.Pointer<ffi.Char> subsystem,
    ffi.Pointer<ffi.Char> devtype,
  ) {
    return _udev_device_get_parent_with_subsystem_devtype(
      udev_device,
      subsystem,
      devtype,
    );
  }

  late final _udev_device_get_parent_with_subsystem_devtypePtr = _lookup<
          ffi.NativeFunction<
              ffi.Pointer<udev_device> Function(ffi.Pointer<udev_device>,
                  ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Char>)>>(
      'udev_device_get_parent_with_subsystem_devtype');
  late final _udev_device_get_parent_with_subsystem_devtype =
      _udev_device_get_parent_with_subsystem_devtypePtr.asFunction<
          ffi.Pointer<udev_device> Function(ffi.Pointer<udev_device>,
              ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Char>)>();

  ffi.Pointer<ffi.Char> udev_device_get_devnode(
    ffi.Pointer<udev_device> udev_device,
  ) {
    return _udev_device_get_devnode(
      udev_device,
    );
  }

  late final _udev_device_get_devnodePtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ffi.Char> Function(
              ffi.Pointer<udev_device>)>>('udev_device_get_devnode');
  late final _udev_device_get_devnode = _udev_device_get_devnodePtr.asFunction<
      ffi.Pointer<ffi.Char> Function(ffi.Pointer<udev_device>)>();

  ffi.Pointer<ffi.Char> udev_device_get_sysattr_value(
    ffi.Pointer<udev_device> udev_device,
    ffi.Pointer<ffi.Char> sysattr,
  ) {
    return _udev_device_get_sysattr_value(
      udev_device,
      sysattr,
    );
  }

  late final _udev_device_get_sysattr_valuePtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ffi.Char> Function(ffi.Pointer<udev_device>,
              ffi.Pointer<ffi.Char>)>>('udev_device_get_sysattr_value');
  late final _udev_device_get_sysattr_value =
      _udev_device_get_sysattr_valuePtr.asFunction<
          ffi.Pointer<ffi.Char> Function(
              ffi.Pointer<udev_device>, ffi.Pointer<ffi.Char>)>();

  ffi.Pointer<udev_enumerate> udev_enumerate_unref(
    ffi.Pointer<udev_enumerate> udev_enumerate,
  ) {
    return _udev_enumerate_unref(
      udev_enumerate,
    );
  }

  late final _udev_enumerate_unrefPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<udev_enumerate> Function(
              ffi.Pointer<udev_enumerate>)>>('udev_enumerate_unref');
  late final _udev_enumerate_unref = _udev_enumerate_unrefPtr.asFunction<
      ffi.Pointer<udev_enumerate> Function(ffi.Pointer<udev_enumerate>)>();

  ffi.Pointer<udev_enumerate> udev_enumerate_new(
    ffi.Pointer<udev> udev,
  ) {
    return _udev_enumerate_new(
      udev,
    );
  }

  late final _udev_enumerate_newPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<udev_enumerate> Function(
              ffi.Pointer<udev>)>>('udev_enumerate_new');
  late final _udev_enumerate_new = _udev_enumerate_newPtr
      .asFunction<ffi.Pointer<udev_enumerate> Function(ffi.Pointer<udev>)>();

  int udev_enumerate_add_match_subsystem(
    ffi.Pointer<udev_enumerate> udev_enumerate,
    ffi.Pointer<ffi.Char> subsystem,
  ) {
    return _udev_enumerate_add_match_subsystem(
      udev_enumerate,
      subsystem,
    );
  }

  late final _udev_enumerate_add_match_subsystemPtr = _lookup<
          ffi.NativeFunction<
              ffi.Int Function(
                  ffi.Pointer<udev_enumerate>, ffi.Pointer<ffi.Char>)>>(
      'udev_enumerate_add_match_subsystem');
  late final _udev_enumerate_add_match_subsystem =
      _udev_enumerate_add_match_subsystemPtr.asFunction<
          int Function(
              ffi.Pointer<udev_enumerate>, ffi.Pointer<ffi.Char>)>();

  int udev_enumerate_scan_devices(
    ffi.Pointer<udev_enumerate> udev_enumerate,
  ) {
    return _udev_enumerate_scan_devices(
      udev_enumerate,
    );
  }

  late final _udev_enumerate_scan_devicesPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(
              ffi.Pointer<udev_enumerate>)>>('udev_enumerate_scan_devices');
  late final _udev_enumerate_scan_devices = _udev_enumerate_scan_devicesPtr
      .asFunction<int Function(ffi.Pointer<udev_enumerate>)>();

  ffi.Pointer<udev_list_entry> udev_enumerate_get_list_entry(
    ffi.Pointer<udev_enumerate> udev_enumerate,
  ) {
    return _udev_enumerate_get_list_entry(
      udev_enumerate,
    );
  }

  late final _udev_enumerate_get_list_entryPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<udev_list_entry> Function(
              ffi.Pointer<udev_enumerate>)>>('udev_enumerate_get_list_entry');
  late final _udev_enumerate_get_list_entry =
      _udev_enumerate_get_list_entryPtr.asFunction<
          ffi.Pointer<udev_list_entry> Function(ffi.Pointer<udev_enumerate>)>();
}

class udev extends ffi.Opaque {}

class udev_list_entry extends ffi.Opaque {}

class udev_device extends ffi.Opaque {}

class udev_enumerate extends ffi.Opaque {}
