// AUTO GENERATED FILE, DO NOT EDIT.
//
// Generated by `package:ffigen`.
import 'dart:ffi' as ffi;
import 'package:ffi/ffi.dart' as pkg_ffi;
import 'package:win32/src/guid.dart' as win32_guid;
import 'package:win32/src/types.dart' as win32_types;

/// Bindings to `SetupAPI.h`.
class SetupAPI {
  /// Holds the symbol lookup function.
  final ffi.Pointer<T> Function<T extends ffi.NativeType>(String symbolName)
      _lookup;

  /// The symbols are looked up in [dynamicLibrary].
  SetupAPI(ffi.DynamicLibrary dynamicLibrary) : _lookup = dynamicLibrary.lookup;

  /// The symbols are looked up with [lookup].
  SetupAPI.fromLookup(
      ffi.Pointer<T> Function<T extends ffi.NativeType>(String symbolName)
          lookup)
      : _lookup = lookup;

  int SetupDiDestroyDeviceInfoList(
    HDEVINFO DeviceInfoSet,
  ) {
    return _SetupDiDestroyDeviceInfoList(
      DeviceInfoSet,
    );
  }

  late final _SetupDiDestroyDeviceInfoListPtr =
      _lookup<ffi.NativeFunction<BOOL Function(HDEVINFO)>>(
          'SetupDiDestroyDeviceInfoList');
  late final _SetupDiDestroyDeviceInfoList =
      _SetupDiDestroyDeviceInfoListPtr.asFunction<int Function(HDEVINFO)>();

  int SetupDiEnumDeviceInterfaces(
    HDEVINFO DeviceInfoSet,
    PSP_DEVINFO_DATA DeviceInfoData,
    ffi.Pointer<GUID> InterfaceClassGuid,
    int MemberIndex,
    PSP_DEVICE_INTERFACE_DATA DeviceInterfaceData,
  ) {
    return _SetupDiEnumDeviceInterfaces(
      DeviceInfoSet,
      DeviceInfoData,
      InterfaceClassGuid,
      MemberIndex,
      DeviceInterfaceData,
    );
  }

  late final _SetupDiEnumDeviceInterfacesPtr = _lookup<
      ffi.NativeFunction<
          BOOL Function(HDEVINFO, PSP_DEVINFO_DATA, ffi.Pointer<GUID>, DWORD,
              PSP_DEVICE_INTERFACE_DATA)>>('SetupDiEnumDeviceInterfaces');
  late final _SetupDiEnumDeviceInterfaces =
      _SetupDiEnumDeviceInterfacesPtr.asFunction<
          int Function(HDEVINFO, PSP_DEVINFO_DATA, ffi.Pointer<GUID>, int,
              PSP_DEVICE_INTERFACE_DATA)>();

  int SetupDiGetDeviceInterfaceDetailW(
    HDEVINFO DeviceInfoSet,
    PSP_DEVICE_INTERFACE_DATA DeviceInterfaceData,
    PSP_DEVICE_INTERFACE_DETAIL_DATA_W DeviceInterfaceDetailData,
    int DeviceInterfaceDetailDataSize,
    PDWORD RequiredSize,
    PSP_DEVINFO_DATA DeviceInfoData,
  ) {
    return _SetupDiGetDeviceInterfaceDetailW(
      DeviceInfoSet,
      DeviceInterfaceData,
      DeviceInterfaceDetailData,
      DeviceInterfaceDetailDataSize,
      RequiredSize,
      DeviceInfoData,
    );
  }

  late final _SetupDiGetDeviceInterfaceDetailWPtr = _lookup<
      ffi.NativeFunction<
          BOOL Function(
              HDEVINFO,
              PSP_DEVICE_INTERFACE_DATA,
              PSP_DEVICE_INTERFACE_DETAIL_DATA_W,
              DWORD,
              PDWORD,
              PSP_DEVINFO_DATA)>>('SetupDiGetDeviceInterfaceDetailW');
  late final _SetupDiGetDeviceInterfaceDetailW =
      _SetupDiGetDeviceInterfaceDetailWPtr.asFunction<
          int Function(
              HDEVINFO,
              PSP_DEVICE_INTERFACE_DATA,
              PSP_DEVICE_INTERFACE_DETAIL_DATA_W,
              int,
              PDWORD,
              PSP_DEVINFO_DATA)>();

  HDEVINFO SetupDiGetClassDevsW(
    ffi.Pointer<GUID> ClassGuid,
    PCWSTR Enumerator,
    int hwndParent,
    int Flags,
  ) {
    return _SetupDiGetClassDevsW(
      ClassGuid,
      Enumerator,
      hwndParent,
      Flags,
    );
  }

  late final _SetupDiGetClassDevsWPtr = _lookup<
      ffi.NativeFunction<
          HDEVINFO Function(ffi.Pointer<GUID>, PCWSTR, win32_types.HWND,
              DWORD)>>('SetupDiGetClassDevsW');
  late final _SetupDiGetClassDevsW = _SetupDiGetClassDevsWPtr.asFunction<
      HDEVINFO Function(ffi.Pointer<GUID>, PCWSTR, int, int)>();
}

typedef BOOL = pkg_ffi.Int;
typedef HDEVINFO = PVOID;
typedef PVOID = ffi.Pointer<ffi.Void>;
typedef PSP_DEVINFO_DATA = ffi.Pointer<_SP_DEVINFO_DATA>;

class _SP_DEVINFO_DATA extends ffi.Struct {
  @DWORD()
  external int cbSize;

  external GUID ClassGuid;

  @DWORD()
  external int DevInst;

  @ULONG_PTR()
  external int Reserved;
}

typedef DWORD = pkg_ffi.UnsignedLong;
typedef GUID = win32_guid.GUID;
typedef ULONG_PTR = pkg_ffi.UnsignedLongLong;
typedef PSP_DEVICE_INTERFACE_DATA = ffi.Pointer<SP_DEVICE_INTERFACE_DATA>;

class SP_DEVICE_INTERFACE_DATA extends ffi.Struct {
  @DWORD()
  external int cbSize;

  external GUID InterfaceClassGuid;

  @DWORD()
  external int Flags;

  @ULONG_PTR()
  external int Reserved;
}

typedef PSP_DEVICE_INTERFACE_DETAIL_DATA_W
    = ffi.Pointer<SP_DEVICE_INTERFACE_DETAIL_DATA_W>;

class SP_DEVICE_INTERFACE_DETAIL_DATA_W extends ffi.Struct {
  @DWORD()
  external int cbSize;

  @ffi.Array.multi([1])
  external ffi.Array<WCHAR> DevicePath;
}

typedef WCHAR = pkg_ffi.WChar;
typedef PDWORD = ffi.Pointer<DWORD>;
typedef PCWSTR = ffi.Pointer<WCHAR>;

const int DIGCF_DEFAULT = 1;

const int DIGCF_PRESENT = 2;

const int DIGCF_ALLCLASSES = 4;

const int DIGCF_PROFILE = 8;

const int DIGCF_DEVICEINTERFACE = 16;
